plugins {
    id 'fabric-loom' version "1.7.4" // To use chocoloom, change the version to a commit hash
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm" version "1.6.10"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven {
        name = "legacy-fabric"
        url = "https://maven.legacyfabric.net"
    }
    ivy {
        url = "https://piston-data.mojang.com"
        patternLayout {
            artifact "v1/[organisation]/[revision]/[module].jar"
            m2compatible = true
        }
        metadataSources { artifact() }
    }
    maven { url "https://jitpack.io" }
    mavenCentral()
    ivy {
        url = "https://nightly.betterthanadventure.net"
        patternLayout {
            artifact "/bta-[revision]-client.jar"
            m2compatible = true
        }
        metadataSources { artifact() }
    }
    ivy {
        url = "https://github.com/Better-than-Adventure"
        patternLayout {
            artifact "[organisation]/releases/download/v[revision]/[module].jar"
            m2compatible = true
        }
        metadataSources { artifact() }
    }
    ivy {
        url = "https://github.com/Turnip-Labs"
        patternLayout {
            artifact "[organisation]/releases/download/v[revision]/[module]-[revision].jar"
            m2compatible = true
        }
        metadataSources { artifact() }
    }
    ivy {
        url = "https://github.com/Turnip-Labs"
        patternLayout {
            artifact "[organisation]/releases/download/[revision]/[module]-[revision].jar"
            m2compatible = true
        }
        metadataSources { artifact() }
    }
    ivy {
        url = "https://github.com/Turnip-Labs"
        patternLayout {
            artifact "[organisation]/releases/download/[revision]/[module]-bta-[revision].jar"
            m2compatible = true
        }
        metadataSources { artifact() }
    }
    ivy {
        url = "https://github.com/Better-than-Adventure"
        patternLayout {
            artifact "[organisation]/releases/download/v[revision]/[module].jar"
            m2compatible = true
        }
        metadataSources { artifact() }
    }
}

loom {
    noIntermediateMappings()
    customMinecraftMetadata.set("https://github.com/Turnip-Labs/bta-manifest-repo/releases/download/v${project.bta_version}/${project.bta_version}.json")
    runs {
        client {
            programArgs "--username Dev"
        }
    }
}


import net.fabricmc.loom.task.RemapJarTask
import org.gradle.internal.os.OperatingSystem

project.ext.lwjglVersion = "3.3.1"
switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        project.ext.lwjglNatives = "natives-linux"
        break
    case OperatingSystem.WINDOWS:
        project.ext.lwjglNatives = "natives-windows"
        break
}

dependencies {
    minecraft "bta-download-repo:bta:${project.bta_version}"
    mappings loom.layered() {}

    modRuntimeOnly "objects:client:43db9b498cb67058d2e12d394e6507722e71bb45" // https://piston-data.mojang.com/v1/objects/43db9b498cb67058d2e12d394e6507722e71bb45/client.jar
    modImplementation "fabric-loader:fabric-loader:${project.loader_version}"

    implementation("org.jetbrains.kotlin:kotlin-stdlib")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-common")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8") // dekotlinify soon :sob:

    implementation("org.javassist:javassist:3.29.2-GA")
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-stb"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"

    var log4jVersion = "2.20.0"
    implementation("org.apache.logging.log4j:log4j-core:${log4jVersion}")
    implementation("org.apache.logging.log4j:log4j-api:${log4jVersion}")
}

configurations.configureEach {
    exclude group: "org.lwjgl.lwjgl"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) it.options.release = 8
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

shadowJar {
    minimize {
        exclude(dependency("org.lwjgl:lwjgl:$lwjglVersion"))
        exclude(dependency("org.lwjgl:lwjgl-glfw:$lwjglVersion"))
        exclude(dependency("org.lwjgl:lwjgl-openal:$lwjglVersion"))
        exclude(dependency("org.lwjgl:lwjgl-opengl:$lwjglVersion"))
    }
    dependencies {
        include(dependency("org.jetbrains.kotlin:kotlin-stdlib"))
        include(dependency("org.jetbrains.kotlin:kotlin-stdlib-common"))
        include(dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk7"))
        include(dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk8"))
        include(dependency("org.javassist:javassist:3.29.2-GA"))

        include(dependency("org.lwjgl:lwjgl:$lwjglVersion"))
        include(dependency("org.lwjgl:lwjgl-glfw:$lwjglVersion"))
        include(dependency("org.lwjgl:lwjgl-openal:$lwjglVersion"))
        include(dependency("org.lwjgl:lwjgl-opengl:$lwjglVersion"))
    }
}

tasks.register('remapShadowJar', RemapJarTask) {
    dependsOn shadowJar
    input = shadowJar.archiveFile
    archiveFileName = "${archivesBaseName}-${project.version}-all-remapped.jar"
    addNestedDependencies = false
}

// configure the maven publication
/*publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        mavenLocal()
    }
}*/